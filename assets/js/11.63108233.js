(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{213:function(s,a,t){"use strict";t.r(a);var e=t(0),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"ipld-schemas-feature-summary"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ipld-schemas-feature-summary"}},[s._v("#")]),s._v(" IPLD Schemas Feature Summary")]),s._v(" "),t("h2",{attrs:{id:"constructs-for-describing-common-data-forms"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructs-for-describing-common-data-forms"}},[s._v("#")]),s._v(" Constructs for Describing Common Data Forms")]),s._v(" "),t("p",[s._v("IPLD Schemas present basics that are well-understood in many programming ecosystems (sum types, product types, some specific recursive types):")]),s._v(" "),t("p",[t("strong",[s._v("Typed maps")])]),s._v(" "),t("div",{staticClass:"language-ipldsch extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("Foo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("Bar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[t("strong",[s._v("Typed lists")])]),s._v(" "),t("div",{staticClass:"language-ipldsch extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Foo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),t("p",[t("strong",[s._v("Typedef'd primitives")])]),s._v(" "),t("div",{staticClass:"language-ipldsch extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[t("code",[t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Foo")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v("\n")])])]),t("p",[t("strong",[s._v("Structs")])]),s._v(" "),t("div",{staticClass:"language-ipldsch extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[t("code",[t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FooBar")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  f Foo\n  b Bar\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[t("strong",[s._v("Discriminated unions (several styles matching those commonly found in the wild)")])]),s._v(" "),t("div",{staticClass:"language-ipldsch extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[t("code",[s._v("type union FooOrBar "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  Foo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"f"')]),s._v("\n  Bar "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token representation"}},[s._v("} "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("representation")])]),s._v(" keyed\n")])])]),t("p",[t("strong",[s._v("Enumerations")])]),s._v(" "),t("div",{staticClass:"language-ipldsch extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[t("code",[t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FBB")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("enum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Foo"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Bar"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Baz"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[t("strong",[s._v("A simple syntax for 'maybe' data elements")])]),s._v(" "),t("div",{staticClass:"language-ipldsch extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[t("code",[t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Foo")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  f "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nullable")]),s._v(" Bar\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Bar")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nullable")]),s._v(" Foo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),t("p",[t("strong",[s._v("A clear syntax for non-required fields")])]),s._v(" "),t("div",{staticClass:"language-ipldsch extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[t("code",[t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Foo")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  f "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("optional")]),s._v(" Bar\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[t("strong",[s._v("Hooks for transparently transforming data with programmatic logic")])]),s._v(" "),t("div",{staticClass:"language-ipldsch extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ipldsch"}},[t("code",[t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("advanced")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ROT13")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token typedef"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("EncryptedString")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" representation advanced ROT13\n")])])]),t("h2",{attrs:{id:"mapped-to-the-data-model"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mapped-to-the-data-model"}},[s._v("#")]),s._v(" Mapped to the Data Model")]),s._v(" "),t("p",[s._v("All of this maps over the IPLD Data Model:")]),s._v(" "),t("ul",[t("li",[s._v("Every type has a representation. e.g. Maps are represented as Maps, Structs are also represented as Maps.")]),s._v(" "),t("li",[s._v("Representations can specify a mapping for serialized field names, which can be useful in cases such as requiring serialization compactness but preferring verbosity in the schema for descriptive purposes.")]),s._v(" "),t("li",[s._v("Representations are customizable, including mapping a type onto a different representation kind entirely. e.g. a Struct can be declared to have a List representation (making it shorter to serialize, if less self-describing); or a Struct can be represented by simple string patterns.")])]),s._v(" "),t("p",[s._v('Some things can go even further than the basic representations. "Advanced data layouts" define types that can act as already-familiar data kinds such as Maps or Lists or Bytes (byte arrays), while using a fully pluggable system to transform the content into other forms for representation. A common use of such a feature is splitting data into fully separate chunks for storage, allowing:')]),s._v(" "),t("ul",[t("li",[s._v("Very large byte arrays stored across many distinct blocks, presenting as a single iterable Bytes kind.")]),s._v(" "),t("li",[s._v("Sharding abstractions for large data sets presented as Map or List kinds.")]),s._v(" "),t("li",[s._v("Transparent wiring of at-rest encryption presenting as the unencrypted form of encrypted data.")])]),s._v(" "),t("p",[s._v("All the same tools that work over the IPLD Data Model also work atop Schemas:")]),s._v(" "),t("ul",[t("li",[s._v("Traversals")]),s._v(" "),t("li",[s._v("Pathing")]),s._v(" "),t("li",[s._v("Selectors")]),s._v(" "),t("li",[s._v("etc.")])]),s._v(" "),t("p",[s._v("All of the generic IPLD algorithms can work over a Schema node in exactly the same way as over nodes in the plain Data Model. This allows novel behaviors such as pathing through a Struct by field names even if the Struct representation is a list.")])])}),[],!1,null,null,null);a.default=n.exports}}]);